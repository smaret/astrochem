#!/usr/bin/env @PYTHON@
#
#  libastrochem_test - Test the libastrochem.py module
#
#  Copyright (c) 2006-2025 Sebastien Maret
# 
#  This file is part of Astrochem.
#
#  Astrochem is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published
#  by the Free Software Foundation, either version 3 of the License,
#  or (at your option) any later version.
#
#  Astrochem is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with Astrochem.  If not, see <http://www.gnu.org/licenses/>.

import sys
import unittest
sys.path.append("@abs_top_srcdir@/python/")
import tools

class TestSequenceFunctions(unittest.TestCase):

    def test_read_chm(self):
        """
        Test if a network in .chm format is read properly

        """

        f = open("network.chm", 'w')
        f.write("""# This network file was created by network_test
# The reaction were extracted form the OSU 2008 network
H            + H                           -> H2                                                           4.95e-17  5.00e-01  0.00e+00  0    1
C(+)         + grain(-)                    -> C            + grain                                         4.90e-17  5.00e-01  0.00e+00  0    3
H3(+)        + grain(-)                    -> H2           + H            + grain                          1.00e-16  5.00e-01  0.00e+00  0   13
C            + cosmic-ray                  -> C(+)         + e(-)                                          1.02e+03  0.00e+00  0.00e+00  1   15
CH5N         + cosmic-ray                  -> HCN          + H2           + H            + H               1.41e+03  0.00e+00  0.00e+00  1  176
C(+)         + Fe                          -> Fe(+)        + C                                             2.60e-09  0.00e+00  0.00e+00  2  218
He(+)        + HNC                         -> C(+)         + N            + H            + He              4.43e-09 -5.00e-01  0.00e+00  2  735
C(-)         + NO                          -> CN(-)        + O                                             1.00e-09  0.00e+00  0.00e+00  3 3151
C(+)         + H                           -> CH(+)                                                        1.70e-17  0.00e+00  0.00e+00  4 3162
C(-)         + C                           -> C2           + e(-)                                          5.00e-10  0.00e+00  0.00e+00  5 3243
O            + CH                          -> HCO(+)       + e(-)                                          2.00e-11  4.40e-01  0.00e+00  6 3289
C            + CH                          -> C2           + H                                             6.59e-11  0.00e+00  0.00e+00  7 3290
C            + C                           -> C2           + photon                                        1.00e-17  0.00e+00  0.00e+00  8 3672
C2(+)        + e(-)                        -> C            + C                                             8.84e-08 -5.00e-01  0.00e+00  9 3688
C(+)         + e(-)                        -> C            + photon                                        4.40e-12 -6.10e-01  0.00e+00 10 4227
C(+)         + C(-)                        -> C            + C                                             2.30e-07 -5.00e-01  0.00e+00 11 4243
C            + e(-)                        -> C(-)                                                         3.00e-15  0.00e+00  0.00e+00 12 4279
C            + uv-photon                   -> C(+)         + e(-)                                          2.16e-10  0.00e+00  2.61e+00 13 4283
""")
        f.close()
        
        f = open("network.chm")
        net = tools.network_reader.fromfile(f, fileformat = "chm")
        f.close()

        self.assertEqual(len(net.data), 18)

        # Reaction #1
        react = net.data[0]
        self.assertEqual(len(react.reactants), 2)
        self.assertEqual(len(react.products), 1)
        self.assertEqual(react.reactants[0], "H")
        self.assertEqual(react.reactants[1], "H")
        self.assertEqual(react.products[0], "H2")
        self.assertEqual(react.alpha, 4.95e-17)
        self.assertEqual(react.beta, .5)
        self.assertEqual(react.gamma, 0)
        self.assertEqual(react.type, 0)
        self.assertEqual(react.number, 1)

        # Reaction #176
        react = net.data[4]
        self.assertEqual(len(react.reactants), 2)
        self.assertEqual(len(react.products), 4)
        self.assertEqual(react.reactants[0], "CH5N")
        self.assertEqual(react.products[0], "HCN")
        self.assertEqual(react.products[1], "H2")
        self.assertEqual(react.products[2], "H")
        self.assertEqual(react.products[3], "H")
        self.assertEqual(react.alpha, 1.41e3)
        self.assertEqual(react.beta, 0)
        self.assertEqual(react.gamma, 0)
        self.assertEqual(react.type, 1)
        self.assertEqual(react.number, 176)

        # Reaction #4227
        react = net.data[14]
        self.assertEqual(len(react.reactants), 2)
        self.assertEqual(len(react.products), 2)
        self.assertEqual(react.reactants[0], "C(+)")
        self.assertEqual(react.reactants[1], "e(-)")
        self.assertEqual(react.products[0], "C")
        self.assertEqual(react.products[1], "photon")
        self.assertEqual(react.alpha, 4.40e-12)
        self.assertEqual(react.beta, -.61)
        self.assertEqual(react.gamma, 0)
        self.assertEqual(react.type, 10)
        self.assertEqual(react.number, 4227)

if __name__ == '__main__':
    unittest.main()


