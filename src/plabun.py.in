#!/usr/bin/env @PYTHON@
#
#  plabun - Plot the abundances computed by Astrochem
#
#  Copyright (c) 2006-2021 Sebastien Maret
# 
#  This file is part of Astrochem.
#
#  Astrochem is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published
#  by the Free Software Foundation, either version 3 of the License,
#  or (at your option) any later version.
#
#  Astrochem is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Astrochem.  If not, see <http://www.gnu.org/licenses/>.

import sys
sys.path.append("@abs_top_srcdir@/python/") # @REMOVE_INST@
sys.path.append("@pythondir@")
import os.path
import getopt
from matplotlib import pyplot as plt
from numpy import *
try:
    from astrochem.tools import readabun,readabunlegacy, _totex_species, listspecies
except ImportError:
    from tools import readabun,readabunlegacy, _totex_species, listspecies


PACKAGE_VERSION = "@PACKAGE_VERSION@"
PACKAGE_BUGREPORT = "@PACKAGE_BUGREPORT@"

def usage():
    """
    Display usage

    """

    print("""Usage: plabun [options] file specie1 [specie2...]

Plot abundances vs. time

Options:
   -h, --help               Display this help
   -V, --version            Display plabun version information
   -o, --output=file        Create a postscript file

   -c, --cell=index         Set the cell number (default 0)
   -x, --xrange=xmin,xmax   Set the x axis range
   -y, --yrange=ymin,ymax   Set the y axis range
   -l, --legacy             To be able to read old output file (.abun)

See the plabun(1) man page for more information""")
    print("Report bugs to <%s>." % PACKAGE_BUGREPORT)

def version():
    """
    Display version number

    """

    print("This is plabun, version %s" % PACKAGE_VERSION)
    print("""Copyright (c) 2006-2021 Sebastien Maret

This is free software. You may redistribute copies of it under the terms
of the GNU General Public License. There is NO WARRANTY, to the extent
permitted by law.""")

def main():
    """
    Plot the abundances computed by Astrochem

    """

    # Parse options and arguments
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hVo:s:x:y:",
                                   ["help", "version", "output=",
                                    "cell=", "shell=", "xrange=",
                                    "yrange=", "legacy"])
    except getopt.GetoptError:
        usage()
        sys.exit(1)

    output = None
    c =  0
    xrange = None
    yrange = None
    model = None
    legacy = False

    for opt, arg in opts:
        if opt in ("-h", "--help") :
            usage()
            sys.exit()
        if opt in ("-V", "--version") :
            version()
            sys.exit()
        if opt in ("-o", "--output"):
            output = arg
        if opt in ("-c", "--cell") or opt in ("-s", "--shell"):
            if opt in ("-s", "--shell"):
                sys.stderr.write("plabun: warning: --shell option is deprecated, use --cell instead.\n")
            try:
                c = int(arg)
            except:
                sys.stderr.write("plabun: error: invalid cell index.\n")
                sys.exit(1)
        if opt in ("-x", "--xrange"):
            try:
                xrange = [float(arg.split(",")[0]), float(arg.split(",")[1])]
            except:
                sys.stderr.write("plabun: error: invalid x axis range.\n")
                sys.exit(1)
        if opt in ("-y", "--yrange"):
            try:
                yrange = [float(arg.split(",")[0]), float(arg.split(",")[1])]
            except:
                sys.stderr.write("plabun: error: invalid y axis range.\n")
                sys.exit(1)
        if opt in ("-m", "--model"):
            model = arg
        if opt in ("-l", "--legacy"):
            legacy = True

    if len(args) == 0:
        usage()
        sys.exit(1)

    # Ignore commands, for backward compatibility
    if args[0] == "time":
        sys.stderr.write("plabun: warning: time command is deprecated, ignoring it.\n")
        args = args[1:]
        if len(args) == 0:
            usage()
            sys.exit(1)

    elif args[0] == "av":
        sys.stderr.write("plabun: error: av command is deprecated.\n")
        sys.exit()

    if legacy:
        filenames = args[0:]
        if len(filenames) > 6:
            sys.stderr.write("plabun: warning: at most 6 species can be plotted, ignoring others.\n")
            filenames = filenames[0:5]
    else:
        filename = args[0]
        species = args[1:]
        if len(species) == 0:
            try:
                print("Available species in this file are:")
                print(listspecies( filename ))
                sys.exit(0)
            except Exception as e:
                sys.stderr.write("plabun: error: can't read %s. Error : %s\n" % (filename, e) )
                sys.exit(1)
        if len(species) > 6:
            sys.stderr.write("plabun: warning: at most 6 species can be plotted, ignoring others.\n")
            species = species[0:5]

    # Get the abundances
    abundances = []
    if legacy:
        for filename in filenames:

            # Read the abundance file
            try:
                time, abund = readabunlegacy(filename)
            except IOError:
                sys.stderr.write("plabun: error: can't open %s.\n" % filename)
                sys.exit(1)
            except ValueError:
                sys.stderr.write("plabun: error: can't read %s.\n" % filename)
                sys.exit(1)

            # Get species name from the filename
            spec = os.path.splitext(os.path.basename(filename))[0]

            # Pick-up values that correspond to the given time index
            try:
                abund = abund[:, c]
            except IndexError:
                sys.stderr.write("plabun: error: shell index is out of bounds.\n")
                sys.exit(1)

            # Drop zeros and negative values
            index = abund > 0
            time = time[index]
            abund = abund[index]

            # Check that time and abund contain at least two points
            if len(time) < 2:
                sys.stderr.write("plabun: warning: found less than two non-zero abundances for %s.\n" % spec)
                continue

            abundances.append([time, abund, spec])
    else:
        for spec in species:
            # Read the abundance file
            try:
                time, abund = readabun(filename,spec)
            except IOError as e:
                sys.stderr.write("plabun: error: can't open %s. Error : %s\n" % (filename, e) )
                sys.exit(1)
            except ValueError as e:
                sys.stderr.write("plabun: error: can't read %s. Error : %s\n" % (filename, e) )
                sys.exit(1)

            # Pick-up values that correspond to the given cell index
            try:
                abund = abund[:, c]
            except IndexError:
                sys.stderr.write("plabun: error: cell index is out of bounds.\n")
                sys.exit(1)

            # Drop zeros and negative values
            index = abund > 0
            time = time[index]
            abund = abund[index]

            # Check that time and abund contain at least two points
            if len(time) < 2:
                sys.stderr.write("plabun: warning: found less than two non-zero abundances for %s.\n" % spec)
                continue

            abundances.append([time, abund, spec])

    # Check that we have at least one abundance to plot
    if len(abundances) == 0:
        sys.stderr.write("plabun: error: nothing to plot.\n")
        sys.exit(1)

    # Plot the abundances
    fig = plt.figure("plabun", figsize=(5.5,4.8))
    fig.subplots_adjust(left=0.15, right=0.92, top = 0.9)
    ax = fig.add_subplot(1, 1, 1)
    ax.margins(0) 
    for time, abund, spec in abundances:
        ax.plot(time, abund, label="$" + _totex_species(spec) + "$")
    ax.set(xscale = "log")
    ax.set(yscale = "log")
    ax.set(title = "Abundances")
    ax.set(xlabel = "Time (yr)")
    ax.set(ylabel = "$\mathrm{n(x)/n_{H}}$")
    if xrange:
        ax.set(xlim=(xrange[0], xrange[1]))
    if yrange:
        ax.set(ylim=(yrange[0], yrange[1]))
    ax.legend()

    if output:
        fig.savefig(output, bbox_inches="tight")
    else:
        plt.show()

main()
