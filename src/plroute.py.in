#!/usr/bin/env @PYTHON@
#
#  plroute - Plot the destruction/formation routes computed by
#  astrochem for a given specie
#
#  Copyright (c) 2006-2025 Sebastien Maret
#
#  This file is part of Astrochem.
#
#  Astrochem is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published
#  by the Free Software Foundation, either version 3 of the License,
#  or (at your option) any later version.
#
#  Astrochem is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Astrochem.  If not, see <http://www.gnu.org/licenses/>.

import sys
sys.path.append("@abs_top_srcdir@/python/") # @REMOVE_INST@
sys.path.append("@pythondir@")
import os.path
import getopt
from matplotlib import pyplot as plt
from matplotlib import gridspec
import numpy as np
try:
    from astrochem.tools import network_reader, readroutlegacy, readrout, _totex_species, listspecies, readfilesattrs
except ImportError:
    from tools import network_reader, readroutlegacy, readrout, _totex_species, listspecies, readfilesattrs

PACKAGE_VERSION = "@PACKAGE_VERSION@"
PACKAGE_BUGREPORT = "@PACKAGE_BUGREPORT@"

def usage():
    """
    Display usage.

    """

    print("""Usage: plroute [options] file

Plot formation/destruction rates vs. time

Options:
   -h, --help               Display this help
   -V, --version            Display plroute version information
   -o, --output             Create a postscript file

   -c, --cell=index         Set the cell index. Default is 0.
   -x, --xrange=xmin,xmax   Set the x axis range
   -y, --yrange=ymin,ymax   Set the y axis range
   -p, --percent            Print the relative contribution of each route
   -l, --legacy             To be able to read old output format file (.rout)
   -m, --chmfile=file       Specify chemical network file (deprecated, used only in legacy mode)

See the plroute(1) man page for more information""")
    print("Report bugs to <%s>." % PACKAGE_BUGREPORT)

def version():
    """
    Display version number.

    """

    print("This is plroute, version %s" % PACKAGE_VERSION)
    print("""Copyright (c) 2006-2025 Sebastien Maret

This is free software. You may redistribute copies of it under the terms
of the GNU General Public License. There is NO WARRANTY, to the extent
permitted by law.""")

def main():
    """
    Main program for plroute

    """

    # Parse options and arguments
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hVo:c:s:x:y:m:pl",
                                   ["help", "version", "output=", "cell=", "shell=",
                                    "xrange=", "yrange=", "chmfile=", "percent", "legacy"])
    except getopt.GetoptError:
        usage()
        sys.exit(1)

    output = None
    c =  0
    xrange = None
    yrange = None
    chmfile = None
    percent = False
    legacy = False

    for opt, arg in opts:
        if opt in ("-h", "--help") :
            usage()
            sys.exit()
        if opt in ("-V", "--version") :
            version()
            sys.exit()
        if opt in ("-o", "--output"):
            output = arg
        if opt in ("-c", "--cell") or opt in ("-s", "--shell"):
            if opt in ("-s", "--shell"):
                sys.stderr.write("plabun: warning: --shell option is deprecated, use --cell instead.\n")
            try:
                c = int(arg)
            except:
                sys.stderr.write("plroute: error: invalid cell index.\n")
                sys.exit(1)
        if opt in ("-x", "--xrange"):
            try:
                xrange = [float(arg.split(",")[0]), float(arg.split(",")[1])]
            except:
                sys.stderr.write("plroute: error: invalid x axis range.\n")
                sys.exit(1)
        if opt in ("-y", "--yrange"):
            try:
                yrange = [float(arg.split(",")[0]), float(arg.split(",")[1])]
            except:
                sys.stderr.write("plroute: error: invalid y axis range.\n")
                sys.exit(1)
        if opt in ("-m", "--chmfile"):
            chmfile = arg
        if opt in ("-p", "--percent"):
            percent = True
        if opt in ("-l", "--legacy"):
            legacy = True

    if len(args) == 0:
        usage()
        sys.exit(1)

    # Ignore commands, for backward compatibility.

    if args[0] == "time":
        sys.stderr.write("plabun: warning: time command is deprecated, ignoring it.\n")
        args = args[1:]

    if legacy:
        if len(args) != 1:
            usage()
            sys.exit(1)
        filename = args[0]
        specie = os.path.splitext(os.path.basename(filename))[0]
    else:
        if len(args) == 1:
            filename = args[0]
            print("Available species in this file are:")
            try:
                listspecies(filename)
            except IOError as e:
                sys.stderr.write("plroute: error: can't open %s. Error : %s\n" % (filename, e) )
            except ValueError as e:
                sys.stderr.write("plroute: error: can't read %s. Error : %s\n" % (filename, e) )
            sys.exit(1)
        else:
            if len(args) != 2:
                usage()
                sys.exit(1)
            filename = args[0]
            specie = args[1]

    # Read the formation/destruction routes.

    try:
        if legacy:
            time, cell, formation_reac, formation_rate, destruction_reac, \
                destruction_rate = readroutlegacy(filename)
        else:
            time, cell, formation_reac, formation_rate, destruction_reac, \
                destruction_rate = readrout(filename, specie)
            chmfile, tmp = readfilesattrs(filename)
    except IOError as e:
        sys.stderr.write("plroute: error: can't open %s.\n" % filename)
        sys.exit(1)
    except ValueError:
        sys.stderr.write("plroute: error: can't read %s.\n" % filename)
        sys.exit(1)

    # Check that the cell index is valid.

    try:
        temp = formation_reac[c, 0, 0]
    except IndexError:
        sys.stderr.write("plroute: error: cell index is out of bounds.\n")
        sys.exit(1)

    # Create arrays containing the destruction/formation routes at
    # each time step and in each cell.

    f_reac = np.unique(formation_reac[c, :, :])
    d_reac = np.unique(destruction_reac[c, :, :])
    f_reac = f_reac[f_reac.nonzero()]
    d_reac = d_reac[d_reac.nonzero()]
    f_rate = np.empty(len(f_reac) * len(time), dtype=float)
    d_rate = np.empty(len(d_reac) * len(time), dtype=float)
    f_rate = f_rate.reshape(len(f_reac), len(time))
    d_rate = d_rate.reshape(len(d_reac), len(time))
    f_rate[:] = np.nan
    d_rate[:] = np.nan

    for i in range(len(time)):
        for j in range(len(f_reac)):
            index = np.where(formation_reac[c, i, :] == f_reac[j])[0]
            if len(index) > 0:
                f_rate[j, i] = formation_rate[c, i, index[0]]
        for j in range(len(d_reac)):
            index = np.where(destruction_reac[c, i, :] == d_reac[j])[0]
            if len(index) > 0:
                d_rate[j, i] = destruction_rate[c, i, index[0]]
    if legacy:
        d_rate = -d_rate # in legacy format, destruction rate are negative

    # Find the most important formation/destruction routes. For
    # this we compute the integral of the formation/destruction
    # rates for each formation/destruction over the time interval.

    int_f_rate = np.zeros(len(f_reac), dtype=float)
    int_d_rate = np.zeros(len(d_reac), dtype=float)

    dtime = time[1:-1] - time[0:-2]

    for j in range(len(f_reac)):
        int_f_rate[j] = np.nansum(f_rate[j, 1:-1] * dtime)
    for j in range(len(d_reac)):
        int_d_rate[j] = np.nansum(d_rate[j, 1:-1] * dtime)

    if percent:
        int_f_rate_percent = int_f_rate / np.sum(int_f_rate) * 100.
        int_d_rate_percent = int_d_rate / np.sum(int_d_rate) * 100.

    index_f = int_f_rate.argsort()[::-1]
    index_d = int_d_rate.argsort()[::-1]

    # Find the reaction corresponding to the reaction numbers.

    if chmfile:
        try:
            f = open(chmfile)
            net = network_reader.fromfile(f, fileformat = "chm")
            f.close()
        except:
            sys.stderr.write("plroute: error: can't read %s.\n" % chmfile)
            sys.exit(1)
        try:
            f_reaction, d_reaction = [], []
            for r in f_reac:
                f_reaction.append(net.getreact(r).totex())
            for r in d_reac:
                d_reaction.append(net.getreact(r).totex())
        except ValueError:
            sys.stderr.write("plroute: error: can't find reaction %i in %s.\n" \
                                 % (r, chmfile))
            sys.exit(1)

    # Plot the formation/destruction rates as a function of time for the main
    # formation/destruction routes.

    fig = plt.figure("plroute", figsize=(10.5,4.8))
    fig.subplots_adjust(left=0.1, right=0.95, top = 0.9, wspace=0.25)
    grs = gridspec.GridSpec(1, 2)

    ax0 = plt.subplot(grs[0])
    ax0.set(title = "Main $" + _totex_species(specie) + "$ formation routes")
    ax0.set(ylabel="Formation rate ($\mathrm{cm^{-3} \, s^{-1}}$)")
    ax0.set(xlabel="Time (yr)")
    ax0.set(xscale = "log")
    ax0.set(yscale = "log")
    ax0.margins(0)

    ax1 = plt.subplot(grs[1])
    ax1.set(title = "Main $" + _totex_species(specie) + "$ destruction routes")
    ax1.set(ylabel="Destruction rate ($\mathrm{cm^{-3} \, s^{-1}}$)")
    ax1.set(xlabel="Time (yr)")
    ax1.set(xscale = "log")
    ax1.set(yscale = "log")
    ax1.margins(0)

    if xrange:
        ax0.set(xlim=(xrange[0], xrange[1]))
        ax1.set(xlim=(xrange[0], xrange[1]))
    if yrange:
        ax0.set(ylim=(yrange[0], yrange[1]))
        ax1.set(ylim=(yrange[0], yrange[1]))

    for j in index_f[0:6]:
        if chmfile:
            label = f_reaction[j]
        else:
            label = "%i" % f_reac[j]
        if percent:
            label += " (%.0f" % int_f_rate_percent[j] + "%)"
        ax0.plot(time, f_rate[j, :], label=label)
    ax0.plot(time, np.nansum(f_rate, axis = 0), linestyle="dotted", color="black", label="Total")
    ax0.legend()

    for j in index_d[0:6]:
        if chmfile:
            label = d_reaction[j]
        else:
            label = "%i" % d_reac[j]
        if percent:
            label += " (%.0f" % int_d_rate_percent[j] + "%)"
        ax1.plot(time, d_rate[j, :], label=label)
    ax1.plot(time, np.nansum(d_rate, axis = 0), linestyle="dotted", color="black", label="Total")
    ax1.legend()

    if output:
        fig.savefig(output, bbox_inches="tight")
    else:
        plt.show()

main()
